<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="Belgisch team"
		creationComplete="view1_creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import AS.FacebookFnct;
			import AS.GlobalVariables;
			import spark.events.IndexChangeEvent;
			//Deze string hebben we nodig om vanuit de FacebookFnct klasse de setName functie te laten uitvoeren.
			private static const ReadLblOk:String = "ok";
			
			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				// Bij het genereren van deze view wordt oa gecontroleerd of de gebruiker al is ingelogd.
				// Indien ja, mag de default skin (login) veranderd worden naar logout.
				
				//devblogService.url="http://fulltextrssfeed.com/www.voetbalkrant.com/nl/rss/nieuws/competities/wk-2014-brazilie";
				devblogService.url="http://yannickcuypers.be/connectDB/select_team.php";
				devblogService.send();
				if(GlobalVariables.loggedIn){
					fbLogin.setStyle("skinClass", skins.facebookOutButton);
				}
			}
			protected function fbLogin_clickHandler(event:MouseEvent):void
			{
				/*
				Deze functie is de handler van de in- en uitlog knop van FB. Deze is bij alle views hetzelfde.
				Als de globale variabele loggedIn true is, is de gerbuiker ingelogd en moet de handler uitloggen.
				Bij false wilt de gebruiker inloggen.
				
				Bij het inloggen wordt door het object GlobalVariablmes.newFacebook de methode FacebookMobile.login opgeroepen.
				De Voornaam van de gebruiker mag nu ook uitgelezen worden en worden getoond in de navigationContent.
				
				Bij het uitloggen roepen we dus de FacebookMobile.logout methode op via he aangemaakte opbject.
				De voornaam van de gebruiker mag worden vergeten en verdwijnen uit de navigationContent.
				De skin van de button moet nu een worden om in te loggen.
				*/
				
				if(GlobalVariables.loggedIn)
				{
					GlobalVariables.newFacebook.logout();
					GlobalVariables.newFacebook.removeEventListener(ReadLblOk, setname);
					trace(GlobalVariables.loggedIn);
					GlobalVariables.firstName = "";
					fbLogin.setStyle("skinClass", skins.facebookInButton);
					Naam.text="";
					trace('logoutHandler');
				}
				else
				{
					GlobalVariables.newFacebook.loginFB();
					GlobalVariables.newFacebook.addEventListener(ReadLblOk, setname);
					trace('loginHandler');
				}
			}
			protected function setname(event:Event):void
			{
				// Hier wordt de globale variabele met als waarde de ingelogde gebruikers voornaam uitgelezen en in de navigationContent gezet.
				// Tegelijk weten we nu dat er ingelogd is en dat de skin van de in- en uitlog button mag veranderen naar logout.
				
				Naam.text = GlobalVariables.newFacebook.username;
				if(GlobalVariables.loggedIn)
					fbLogin.setStyle("skinClass", skins.facebookOutButton);
				trace ("test: " + GlobalVariables.newFacebook.username + " en loggedIn = " + GlobalVariables.loggedIn);
			}
			
			protected function devblogService_resultHandler(event:ResultEvent):void
			{
				//select het item van feed
				devblogList.dataProvider=event.result.news.channel;
			}
			
			protected function devblogList_changeHandler(event:IndexChangeEvent):void
			{
				//selecteer item en ga naar detailview
				navigator.pushView(TeamDetailView, List(event.currentTarget).selectedItem);
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:HTTPService id="devblogService"
					   result="devblogService_resultHandler(event)"/>
	</fx:Declarations>
	<s:navigationContent>
		<s:Label id="Naam" text="{GlobalVariables.firstName}"/>
	</s:navigationContent>
	<s:actionContent>
		
		<s:Button id="fbLogin" skinClass="skins.facebookInButton" click="fbLogin_clickHandler(event)"/>
	</s:actionContent>
	<s:List id="devblogList" height="100%" width="100%" change="devblogList_changeHandler(event)">
		<s:itemRenderer>
			<fx:Component>
				<s:IconItemRenderer label="{data.title}"/>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
</s:View>